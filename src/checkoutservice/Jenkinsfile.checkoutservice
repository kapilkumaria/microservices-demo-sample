pipeline {
    agent { label 'dev' }

    environment {
        REPO_URL = 'https://github.com/kapilkumaria/microservices-demo-sample.git' // Repository URL
        SONARQUBE_SERVER = 'sonarQube' // SonarQube server name configured in Jenkins
        SONARQUBE_URL = 'http://44.211.60.45:9000' // SonarQube server URL
        SONARQUBE_TOKEN = credentials('sonar-token') // SonarQube token stored in Jenkins
        SERVICE_NAME = 'checkoutservice' // Specific service name for this Jenkinsfile
        PATH = "/opt/sonar-scanner/sonar-scanner-4.8.0.2856-linux/bin:${env.PATH}"
        
        
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from ${REPO_URL} for ${SERVICE_NAME}"
                git url: "${REPO_URL}", branch: 'feature/jenkinsfile-checkoutservice' // Clone specified branch
            }
        }

        

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarQube') {

                                   sh """
                                        cd src/adservice
                                        chmod +x ./gradlew
                                        ./gradlew sonarqube || true \
                                            --init-script /root/.gradle-init/init.gradle \
                                            --no-daemon \
                                            -Dsonar.projectKey=${SERVICE_NAME} \
                                            -Dsonar.sources=. \
                                            -Dsonar.host.url=$SONARQUBE_URL \
                                            -Dsonar.login=$SONARQUBE_TOKEN
                                    """

                    }
                }
           }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image for ${SERVICE_NAME}"
                sh """
                    docker build -t ${SERVICE_NAME}:latest -f src/checkoutservice/Dockerfile src/checkoutservice
                """
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully for ${SERVICE_NAME}!"
        }
        failure {
            echo "Pipeline failed for ${SERVICE_NAME}. Please check logs for details."
        }
    }
}
