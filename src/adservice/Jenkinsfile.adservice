pipeline {
    agent {
        label 'gcp-microservices' // Ensures the job runs on the 'gcp-microservices' Jenkins slave
    }

    environment {
        REPO_URL = 'https://github.com/kapilkumaria/microservices-demo-sample.git' // Repository URL
        SERVICE_NAME = 'adservice' // Specific service name for this Jenkinsfile
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from ${REPO_URL} for ${SERVICE_NAME}"
                git url: "${REPO_URL}", branch: 'feature/jenkinsfile-adservice' // Clone specified branch
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {

                    def sonarQubeServer = SONARQUBE_SERVER // This is the server name you configured
                    echo "Using SonarQube Server: ${sonarQubeServer}"
                }

                sh """
                   echo "Starting SonarQube Analysis for ${SERVICE_NAME}"
                   /opt/sonar-scanner/bin/sonar-scanner \\
                   -Dsonar.projectKey=${SERVICE_NAME} \\
                   -Dsonar.sources=. \\
                   -Dsonar.host.url=$SONAR_HOST_URL \\
                   -Dsonar.login=$SONAR_AUTH_TOKEN
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image for ${SERVICE_NAME}"
                sh """
                    docker build -t ${SERVICE_NAME}:latest .
                """
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully for ${SERVICE_NAME}!"
        }
        failure {
            echo "Pipeline failed for ${SERVICE_NAME}. Please check logs for details."
        }
    }
}

