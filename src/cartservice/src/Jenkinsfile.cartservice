pipeline {
    agent { label 'dev' } // Main Jenkins agent with the 'dev' label

    environment {
        REPO_URL = 'https://github.com/kapilkumaria/microservices-demo-sample.git'
        SONARQUBE_SERVER = 'sonarQube'
        SONARQUBE_URL = 'http://34.201.15.58:9000'
        SONARQUBE_TOKEN = credentials('sonar-token')
        SERVICE_NAME = 'cartservice'
        PATH = "/usr/bin:${env.PATH}"
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from ${REPO_URL} for ${SERVICE_NAME}"
                git url: "${REPO_URL}", branch: 'feature/jenkinsfile-cartservice'
            }
        }

        stage('Restore Dependencies and SonarQube Analysis') {
            agent {
                docker {
                    image 'mcr.microsoft.com/dotnet/sdk:6.0'
                    args '-v /var/run/docker.sock:/var/run/docker.sock' // Attach Docker socket for inner Docker commands
                }
            }
            steps {
                script {
                    withSonarQubeEnv('sonarQube') {
                        sh """
                            cd src/cartservice
                            dotnet restore
                            dotnet sonarscanner begin \
                                /k:"${SERVICE_NAME}" \
                                /d:sonar.host.url="${SONARQUBE_URL}" \
                                /d:sonar.login="${SONARQUBE_TOKEN}"

                            # Build the project after starting SonarQube analysis
                            dotnet build --no-incremental

                            # End the SonarQube analysis
                            dotnet sonarscanner end \
                                /d:sonar.login="${SONARQUBE_TOKEN}"
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Installing Docker if not already installed, then building Docker image for ${SERVICE_NAME}"
                sh '''
                    # Check if Docker is installed
                    if ! command -v docker &> /dev/null; then
                        echo "Docker not found, installing..."
                        curl -fsSL https://get.docker.com | sh
                        sudo usermod -aG docker $USER
                        newgrp docker
                    else
                        echo "Docker is already installed"
                    fi
                    
                    # Display Docker version
                    docker --version

                    # Build Docker image
                    docker build -t ${SERVICE_NAME}:latest -f src/cartservice/Dockerfile src/cartservice
                '''
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully for ${SERVICE_NAME}!"
        }
        failure {
            echo "Pipeline failed for ${SERVICE_NAME}. Please check logs for details."
        }
    }
}
