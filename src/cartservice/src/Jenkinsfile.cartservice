pipeline {
    agent { label 'dev' }

    environment {
        REPO_URL = 'https://github.com/kapilkumaria/microservices-demo-sample.git' // Repository URL
        SONARQUBE_SERVER = 'sonarQube' // SonarQube server name configured in Jenkins
        SONARQUBE_URL = 'http://54.236.37.7:9000' // SonarQube server URL
        SONARQUBE_TOKEN = credentials('sonar-token') // SonarQube token stored in Jenkins
        SERVICE_NAME = 'cartservice' // Service name specific to this Jenkinsfile
        DOTNET_SDK_VERSION = '6.0' // Specify the .NET SDK version to use
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from ${REPO_URL} for ${SERVICE_NAME}"
                git url: "${REPO_URL}", branch: 'feature/jenkinsfile-cartservice' // Clone the specified branch
            }
        }

        stage('Restore Dependencies') {
            steps {
                echo "Restoring dependencies for ${SERVICE_NAME}"
                sh """
                    cd src/cartservice
                    dotnet restore
                """
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarQube') {
                        sh """
                            cd src/cartservice
                            dotnet sonarscanner begin \
                                /k:"${SERVICE_NAME}" \
                                /d:sonar.host.url="${SONARQUBE_URL}" \
                                /d:sonar.login="${SONARQUBE_TOKEN}"

                            # Build the project after starting SonarQube analysis
                            dotnet build --no-incremental

                            # End the SonarQube analysis
                            dotnet sonarscanner end \
                                /d:sonar.login="${SONARQUBE_TOKEN}"
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image for ${SERVICE_NAME}"
                sh """
                    docker build -t ${SERVICE_NAME}:latest -f src/cartservice/Dockerfile src/cartservice
                """
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully for ${SERVICE_NAME}!"
        }
        failure {
            echo "Pipeline failed for ${SERVICE_NAME}. Please check logs for details."
        }
    }
}
