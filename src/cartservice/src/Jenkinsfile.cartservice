pipeline {
    agent { label 'dev' } // Main Jenkins agent with the 'dev' label

    environment {
        REPO_URL = 'https://github.com/kapilkumaria/microservices-demo-sample.git'
        SONARQUBE_SERVER = 'sonarQube'
        SONARQUBE_URL = 'http://34.201.15.58:9000'
        SERVICE_NAME = 'cartservice'
        PATH = "/usr/share/dotnet:/usr/bin:${env.PATH}"
    }
    
    stages {
        stage('Setup Environment') {
            steps {
                echo "Installing Docker, Dotnet SDK, and SonarScanner if not already installed"
                sh '''
                    # Check if Docker is installed
                    if ! command -v docker &> /dev/null; then
                        echo "Docker not found, installing..."
                        curl -fsSL https://get.docker.com | sh
                        sudo usermod -aG docker $USER
                        newgrp docker
                    else
                        echo "Docker is already installed"
                    fi
                    
                    # Install Dotnet SDK
                    DOTNET_VERSION=8.0.100
                    DOTNET_DOWNLOAD_URL="https://dotnetcli.azureedge.net/dotnet/Sdk/$DOTNET_VERSION/dotnet-sdk-$DOTNET_VERSION-linux-x64.tar.gz"
                    INSTALL_DIR="/usr/share/dotnet"

                    sudo rm -rf $INSTALL_DIR
                    sudo mkdir -p $INSTALL_DIR

                    curl -L $DOTNET_DOWNLOAD_URL -o dotnet-sdk.tar.gz
                    sudo tar -zxf dotnet-sdk.tar.gz -C $INSTALL_DIR
                    rm dotnet-sdk.tar.gz

                    export PATH="$INSTALL_DIR:$PATH"
                    echo "PATH after installation: $PATH"

                    # Install dotnet-sonarscanner as a global tool if not already installed
                    if ! dotnet tool list -g | grep -q dotnet-sonarscanner; then
                        echo "Installing dotnet-sonarscanner"
                        dotnet tool install --global dotnet-sonarscanner
                    else
                        echo "dotnet-sonarscanner is already installed"
                    fi

                    export PATH="$PATH:$HOME/.dotnet/tools"  # Make sure global tools are accessible

                    # Verify installations
                    docker --version
                    dotnet --version
                    dotnet sonarscanner --version || echo "SonarScanner installation verification failed; please check setup steps."
                '''
            }
        }

        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from ${REPO_URL} for ${SERVICE_NAME}"
                git url: "${REPO_URL}", branch: 'feature/jenkinsfile-cartservice'
            }
        }

        stage('Restore Dependencies and SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarQube') {
                        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONARQUBE_TOKEN')]) {
                            sh '''
                                export PATH="/usr/share/dotnet:$PATH:$HOME/.dotnet/tools"  # Ensure sonarscanner is on PATH
                                cd src/cartservice
                                dotnet restore
                                dotnet sonarscanner begin \
                                    /k:"${SERVICE_NAME}" \
                                    /d:sonar.host.url="${SONARQUBE_URL}" \
                                    /d:sonar.login="$SONARQUBE_TOKEN"

                                # Build the project after starting SonarQube analysis
                                dotnet build --no-incremental

                                # End the SonarQube analysis
                                dotnet sonarscanner end \
                                    /d:sonar.login="$SONARQUBE_TOKEN"
                            '''
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image for ${SERVICE_NAME}"
                sh """
                    docker build -t ${SERVICE_NAME}:latest -f src/cartservice/Dockerfile src/cartservice
                """
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully for ${SERVICE_NAME}!"
        }
        failure {
            echo "Pipeline failed for ${SERVICE_NAME}. Please check logs for details."
        }
    }
}
